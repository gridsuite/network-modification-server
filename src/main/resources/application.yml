spring:
  application:
    name: netork-modification-server

  datasource:
    url: ${dbUrl}
    username: ${login}
    password: ${password}

  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
    properties:
      dialect: org.hibernate.dialect.PostgreSQLDialect
      hibernate:
        format_sql: true
        # Used when action: create is uncommented
        hbm2ddl:
          delimiter: ;
      # Uncomment action to automatically generate the database sql schema file
      javax:
        persistence:
          schema-generation:
            scripts:
              #action: create
              create-target: src/main/resources/network-modification.sql
              create-source: metadata
  data:
    elasticsearch:
      enabled: false
      host: localhost
      port: 9200
      client:
        timeout: 60  # Seconds

server:
  port: 5007
  forward-headers-strategy: framework

network-store-server:
  base-uri: http://localhost:8080

backing-services:
  report-server:
    base-uri: http://localhost:5028

# this structure is shared among all microservices, if you change it, change it everywhere
# customQuery allows a microservice to set query parameters specific to itself
# if customQuery is empty, set queryBegin to "?", otherwise set it to "&"
# this allow the user to add additional query elements common to all microservices
# and using the appropriate leading character depending on whether the microsevice
# uses custom query parameters
queryBegin: '?'
customQuery:
dbName: networkmodifications
dbApi: jdbc
